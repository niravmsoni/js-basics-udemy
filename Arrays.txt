Arrays:

Adding elements

const numbers = [3,4];
    // With const, we cannot re-assign the numbers array like numbers = []; But, we can modify(Add/remove) items of the array.

We can add elements to the arrays at:
    1. At the End(push method)
    2. At the beginning(unshift method)
    3. At the middle

const numbers = [5, 6];

//At the end
numbers.push(7);
console.log(numbers);

//At the beginning
numbers.unshift(3,4);
console.log(numbers);

//At the middle. First argument(Starting index), second argument(Number of items we want to delete. Keep it 0 if we want to preserve existing array items), then add whatever characters we want to add
numbers.splice(2, 0, 'a', 'b');

---------------------
Finding elements(Primitive)

--Older method
Use indexOf method. Checks for type and value of the item. If no matches found, returns -1.
Use lastIndexOf method if we want to find index of last occurrence from the array

--newer way(Using includes)
To check if item exists in array or not.

const numbers = [1, 2, 3, 4, 1];

console.log(numbers.indexOf('1'));
console.log(numbers.lastIndexOf(1));
console.log(numbers.includes(1));

------------
Finding elements(reference types)
const courses = [
    { id: 1, name: 'a' },
    { id: 2, name: 'b' },
]

//Won't work with reference types
console.log(courses.includes({id: 1, name:'a'}));   // Returns false
// We get false since these are 2 different objects
// Since they're present in 2 different locations in memories 

//Correct way to use .find() method
    - Returns first item that matches criteria. If no matching found, returns undefined
let course = courses.find(function(course){
    return course.name === 'a';
});

// .findIndex() does same thing. If matching element found, returns index position else returns -1.

-- ---------
Arrow Function
    Introduced since ES6.
    Used when we want to pass a function as a callback fn or an argument for a different method, 
    we use arrow fn.

//Arrow function syntax
    //Remove function keyword.
    // In case of single param, remove ()brackets
    // In case of no param, have ()

    // In case of single statement like below, remove return keyword and {} as well.
    // Read as course goes to course.name equals a
let course = courses.find(course => course.name === 'a');

console.log(course);

-------------
Remove elements from array.

//Remove elements
const numbers = [1, 2, 3, 4];

//End -.pop() -> Removes last element of array and returns it.
const last = numbers.pop();
console.log(numbers);
console.log(last);

//Beginning 
const first = numbers.shift();
console.log(numbers);
console.log(first);

//Middle
numbers.splice(2, 1);
console.log(numbers);

----------
Empty an array

et numbers = [1, 2, 3, 4];
let another = numbers;  // Arrays = Reference type

//Soln#1 - Doesn't work for more than 1 references to our array(Recommended)
// numbers = [];

// Soln#2 - Set .length to 0(Recommended)
// numbers.length = 0;

// Soln#3 - Use splice method
// numbers.splice(0, numbers.length);

//Soln#4 - Pop method - Use it in loop(Least recommended)
while(numbers.length > 0)
    numbers.pop();

console.log(numbers);
console.log(another);

---------
Combining and Slicing arrays
Primitive types:
const first = [1, 2, 3];
const second = [4, 5, 6];

//Combine using concat()
const combined = first.concat(second);   // Returns new array. First & second will remain untouched
console.log(combined);

//Slice array using slice()
const slice = combined.slice(2);
console.log(slice);


const first = [{id: 1}];// Reference type[Object].
const second = [4, 5, 6];

const combined = first.concat(second);  
// With concat, the returned array's 0th element will also point to same reference in memory.
// So, directly updating the id will result in updated combined array's 0 element.
first[0].id = 2;

console.log(combined);

------------------
Spread operator
    - Cleaner approach to concat arrays as compared to concat()

const first = [1, 2, 3];
const second = [4, 5, 6];

//Combine using spread operator.
//Gives more flexibility if we want to add anything between these 2 arrays
const combined = [...first, 'a', ...second]   // Returns new array. First & second will remain untouched
console.log(combined);

const copy = [...combined];
console.log(copy);


--------------
Iterating an array

const numbers = [1, 2, 3];

// Soln#1 - Using for..of loop
for (let number of numbers)
    console.log(number);

// Soln#2 - Using forEach loop
numbers.forEach(function(number){
    console.log(number);
});

// Soln#3 - Using forEach with arrow function
numbers.forEach(number => console.log(number));

----------------
Joining an array

const numbers = [1, 2, 3];
//Soln#1 - Join array using join() method. Specify separator if any. In our case ','
const joined = numbers.join(',');

console.log(joined);

//Another similar implementation but with strings.
const message = 'This is my first message';
//Split string where space is encountered
const parts = message.split(' ');
console.log(parts);

//Join array using '-'
const combined = parts.join('-');

-----------------
Sorting an array
    Primitive types:
        .sort()
        .reverse()

const numbers = [2, 3, 1];

// Soln#1 - It converts the array into string and then sorts it. Useful if arrays have nmbers/strings
numbers.sort();
console.log(numbers);

//Soln#2 - Reverses array
numbers.reverse();
console.log(numbers);

    Objects:

    // For objects, we need to pass a custom function(Or Arrow Fn) to sort method and implement custom logic
const courses = [ 
    {id: 1, name: 'Node.js'},
    {id: 2, name: 'javascript'}
]

courses.sort((a, b) => {
    // a < b => -1
    //a > b => 1
    // a === b => 0

    const nameA = a.name.toUpperCase();
    const nameB = b.name.toUpperCase();

    if (nameA < nameB) return -1;
    if (nameA > nameB) return 1;
    return 0;
});

console.log(courses);

---------------
Testing elements of array
Useful functions in Js:
    1. every()
    2. some()

1. every()
    Checks if every element in array meets the criteira?
    Takes in call back function as argument and then returns bool based on condition

    //Check if all numbers are > 0
    const numbers = [1, 2, 3, -1];

    const allPositive = numbers.every(function(value){
    return value >= 0;
    });

     console.log(allPositive);

2. some()
 Checks if at-least 1 element in array meets the criteira?
//Check if at-least 1 number is > 0
const numbers = [1, 2, 3, -1];

const atLeastOnePositive = numbers.some((value) => {
return value >= 0;
});

console.log(atLeastOnePositive);

----------------
Filtering an array
//filter() method returns filtered items from array based on the condition
const numbers = [1, -1, 2, 3];

const filtered = numbers.filter(value => {
    return value >= 0;
});

console.log(filtered);

-----------------
Mapping an array

.map() method to map each element of array into something else
Below example -> Mapped number to string
const numbers = [1, -1, 2, 3];

const filtered = numbers.filter(value => {
    return value >= 0;
});

const items = filtered.map(n => '<li>' + n + '</li>');

const html = '<ul>' + items.join('') + '</ul>';
console.log(html);

//Mapping with object

.map() does not modify the original array instead they return back the modified aray.
So, THEY're CHAINABLE

const numbers = [1, -1, 2, 3];

const items = numbers
.filter(n => n >= 0)
.map(n => ({value: n}));

console.log(items);


------------
Reducing an array

Use .reduce() method
First param -> Accumulator, 2nd param -> Current value
Loop through all elements and assign value to accumulator