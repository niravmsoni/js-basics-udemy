Functions:

Declarations vs Expressions
With js, there are 2 types of functions:
    Function Declaration & 
    Function Expression

//Function Declaration
function walk(){
    console.log('walk');
}

//Anonymous Function Expression
let run = function(){
    console.log('run');
};

run(); //Function call
let move = run;
move();

//Named Function Expression
let run = function test(){
    console.log('run');
};

-----------------
Hoisting

With Function declaration syntax, we can call the function before its' defined.
With Function Expression, we get uncaught reference error

walk();

function walk(){
    console.log('walk');
}

run(); //Error since this is equivalent to logging a variable before declaring it.

const run = function(){
    console.log('run');
};

//Reason this happens is because of a process namely Hoisting.
//All Function declarations are moved to the top of the file by javascript engine(Done Automatically)

----------------
Arguments
//JS is a dynamic language. We don't need to specify the actual data type of the argument.
Even the number of argument does not need to match the definition.
If our function expects 2 arguments and we send in more than 2, it will not throw error
Instead, it will only take first 2 arguments into consideration.

//If we want to access the rest of arguments, we need to use the "arguments" object
//arguments object has array of all parameters passed to the function

//Below function does not rely on parameters. Instead, it directly accesses all the items from arguments object.
function sum(){
    let total = 0;
    for(let value of arguments)
    total+= value;
    return total;
}

console.log(sum(1, 2, 3, 4, 5));


----------------
The Rest Operator

    Useful if we want to have a varying number of arguments coming in to the function
    We specify it with 3 dots in the function parameter.
    Kind of similar to spread operator in js.
    function sum(discount, ...args){    // works
        ...
    }

    function sum(discount, ...args, someValue)  //Errors out. Rest parameter MUST BE the last formal parameter

    Reason it's named as Rest is because this being the last param of a function. So, its implied that the function can contain n number of params and the rest of params(variable params can be passed from the caller).


--------------
Default parameter

    1. Soln#(Older way): Use || condition(In this case, if rate and years are not passed, they will be used as 3.5 and 5 respectively due to truthy keyword)
    function interest(principal, rate, years){
    rate = rate || 3.5;
    years = years || 5;

    return principal * rate / 100 * years;
    }

    console.log(interest(10000, 3.5, 5));

    2. Soln#2(ES6) : Set default value in the function definition itself

    function interest(principal, rate = 3.5, years = 5){
        return principal * rate / 100 * years;
    }

    console.log(interest(10000, 3.5, 5));

    CAVEAT# - Whatever default value we give to a parameter, ALL PARAMETERS FOLLOWING IT SHOULD ALSO BE ASSIGNED A DEFAULT VALUE.
    IN ABOVE EXAMPLE, If we do not specify years = 5, it will remain undefined

---------
Getters & Setters

Problem:
const person = {
    firstName: 'Nirav',
    lastName: 'Soni',
    fullName(){
        return `${person.firstName} ${person.lastName}`
    }
};

console.log(person.fullName());

//Using this approach, we defined a function inside the object namely fullName() and made a function call().
//However, we won't be able to set it. Also, fullName ideally should be a property and not a method.
//So, here's where getters and setters come in, 

//Use Get and Set keywords inside the object and access it like properties

const person = {
    firstName: 'Nirav',
    lastName: 'Soni',
    get fullName(){
        return `${person.firstName} ${person.lastName}`
    },
    set fullName(value){
        const parts = value.split(' ');
        this.firstName = parts[0];
        this.lastName = parts[1];
    }
};

console.log(person.fullName);
person.fullName = 'Hemali Soni';

console.log(person);

-----------------
Try and Catch

    Similar to C#, we can throw Error() and catch it in a try..catch block to gracefully handle exception

    We can throw Error object with this syntax "throw new Error('<Error message>');

    We can wrap the caller in a try..catch block and do whatever we want to do with the catch block

    
const person = {
    firstName: 'Nirav',
    lastName: 'Soni',
    get fullName(){
        return `${person.firstName} ${person.lastName}`
    },
    set fullName(value){
        if (typeof value !== 'string')
            throw new Error('Value is not a string.');

        const parts = value.split(' ');
        if (parts.length !== 2)
            throw new Error('Enter a first and last name')

        this.firstName = parts[0];
        this.lastName = parts[1];
    }
};

try{
    person.fullName = '';
}
catch(e){
    alert(e);
}

console.log(person);

-----------------
Scope

Scope of constant/variable decides where that constant or variable is accessible
1. Variables defined with let/const are limited to the scope that they're declared in.

For ex:
const color = 'red';    // Global scope
function start (){
    const message='hi'; // Local scope
    const color = 'blue';
    console.log('color);    // Works(Due to global scope. We see BLUE since local variables take precedence over global variables)
    console.log(message);   // Works(Due to local scope)
}

console.log(message);   //Will throw error since its' not accessible
Replace function in top example with if() statement OR a for() loop. Result will be the same 

If a variable is defined outside of any brackets, the scope of it becomes GLOBAL

As a general best practise, try to avoid Global variables as much as possible

--------------
Let vs Var

Issue#1
Prior to ES6, var was the only option to declare variables.
    //var -> Creates function-scoped variables
    //let, const -> create block-scoped variables

function startWithLet(){
    for(let i = 0; i < 5; i++)
        console.log(i);

    console.log(i); // Error - Since With Let, scope remains limited to where its' supposed to be.
}

function startWithVar(){
    for(var i = 0; i < 5; i++)
        console.log(i);

    console.log(i); // Prints 5 since with var, it does not terminate once for loop ends. Issue with VAR
}

startWithLet();
startWithVar();

Issue#2 - If var declared in global scope, it attaches itself to window object. Let does not.
Window is a big complex object
