Functions:

Declarations vs Expressions
With js, there are 2 types of functions:
    Function Declaration & 
    Function Expression

//Function Declaration
function walk(){
    console.log('walk');
}

//Anonymous Function Expression
let run = function(){
    console.log('run');
};

run(); //Function call
let move = run;
move();

//Named Function Expression
let run = function test(){
    console.log('run');
};

-----------------
Hoisting

With Function declaration syntax, we can call the function before its' defined.
With Function Expression, we get uncaught reference error

walk();

function walk(){
    console.log('walk');
}

run(); //Error since this is equivalent to logging a variable before declaring it.

const run = function(){
    console.log('run');
};

//Reason this happens is because of a process namely Hoisting.
//All Function declarations are moved to the top of the file by javascript engine(Done Automatically)

----------------
Arguments
//JS is a dynamic language. We don't need to specify the actual data type of the argument.
Even the number of argument does not need to match the definition.
If our function expects 2 arguments and we send in more than 2, it will not throw error
Instead, it will only take first 2 arguments into consideration.

//If we want to access the rest of arguments, we need to use the "arguments" object
//arguments object has array of all parameters passed to the function

//Below function does not rely on parameters. Instead, it directly accesses all the items from arguments object.
function sum(){
    let total = 0;
    for(let value of arguments)
    total+= value;
    return total;
}

console.log(sum(1, 2, 3, 4, 5));


----------------
The Rest Operator

    Useful if we want to have a varying number of arguments coming in to the function
    We specify it with 3 dots in the function parameter.
    Kind of similar to spread operator in js.
    function sum(discount, ...args){    // works
        ...
    }

    function sum(discount, ...args, someValue)  //Errors out. Rest parameter MUST BE the last formal parameter

    Reason it's named as Rest is because this being the last param of a function. So, its implied that the function can contain n number of params and the rest of params(variable params can be passed from the caller).